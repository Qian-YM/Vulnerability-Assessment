package inforCollect

import (
	"git.mills.io/prologic/go-netstat"
	"log"
	"strings"
	"vulAssessClient/utils"
)

// GetListenProcess 获取监听端口的进程，且排除监听回环地址的进程
func GetListenProcess() ([]netstat.SockTabEntry, error) {
	//// UDP sockets
	//socks, err := netstat.UDPSocks(netstat.NoopFilter)
	//// TCP sockets
	//socks, err = netstat.TCPSocks(netstat.NoopFilter)

	var res []netstat.SockTabEntry
	// get only listening TCP sockets
	tabs, err := netstat.TCPSocks(func(s *netstat.SockTabEntry) bool {
		return s.State == netstat.Listen
	})
	if err != nil {
		return nil, err
	}
	res = append(res, tabs...)

	tabs, err = netstat.TCP6Socks(func(s *netstat.SockTabEntry) bool {
		return s.State == netstat.Listen
	})
	if err != nil {
		return nil, err
	}
	res = append(res, tabs...)

	//// list all the TCP sockets in state FIN_WAIT_1 for your HTTP server
	//tabs, err = netstat.TCPSocks(func(s *netstat.SockTabEntry) bool {
	//	return s.State == netstat.FinWait1 && s.LocalAddr.Port == 80
	//})
	//// error handling, etc.

	return res, err
}

// GetPortServer 使用nmap扫描端口服务
func GetPortServer(ports []string) string {
	res, _ := utils.GetCommandOutput("nmap", "-sV", "-p", strings.Join(ports, ","), "-Pn", "-sT", "-T4", "127.0.0.1", "-oX", "-")
	log.Println(res)
	return res
}
