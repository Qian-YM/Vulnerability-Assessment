package main

import (
	"encoding/base64"
	"github.com/gin-gonic/gin"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"vulAssessClient/inforCollect"
	"vulAssessClient/utils"
)

// TODO: 在makefile中动态插入server地址
// go build -X main.serverAddr = ...
// TODO: 将配置写入config文件

// defineRoutes 定义路由，在这里接收server命令，开启协程执行并返回结果
func defineRoutes() *gin.Engine {
	gin.SetMode(gin.ReleaseMode)
	gin.DisableConsoleColor()
	r := gin.Default()

	r.POST("/", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"message": "welcome"})
	})

	// TODO: 鉴权 与 加密通信
	// 获得占用端口 -> 获得占用端口进程pid -> 获得占用端口服务、版本
	r.POST("/api/get_server", func(c *gin.Context) {
		listenProcess, err := inforCollect.GetListenProcess()
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		}
		var ports []string
		var expect uint16 = 12345
		for _, p := range listenProcess {
			if !p.LocalAddr.IP.IsLoopback() && p.LocalAddr.Port != expect {
				ports = append(ports, strconv.Itoa(int(p.LocalAddr.Port)))

			}
		}
		ports = utils.RemoveRepByMap(ports)
		//ports := []string{"53", "3306", "1716"}
		//encodeString := base64.StdEncoding.EncodeToString([]byte(getPortServer(ports)))
		//fmt.Println(encodeString)
		log.Printf("port:%v", ports)

		c.JSON(http.StatusOK, gin.H{"message": base64.StdEncoding.EncodeToString([]byte(strings.Join(ports, ",")))})
	})

	r.POST("/api/kernel_version", func(c *gin.Context) {
		ver, err := inforCollect.GetKernelVersion()
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		}
		c.JSON(http.StatusOK, gin.H{"message": base64.StdEncoding.EncodeToString([]byte(ver))})
	})

	r.POST("/api/exit", func(c *gin.Context) {
		os.Exit(0)
	})

	return r
}

func main() {

	//listenProcess, err := getListenProcess()
	//if err != nil {
	//	return
	//}
	//var ports []string
	//for _, p := range listenProcess {
	//	if !p.LocalAddr.IP.IsLoopback() {
	//		//fmt.Printf("%+v\n", strconv.Itoa(int(l.localPort)))
	//		ports = append(ports, strconv.Itoa(int(p.LocalAddr.Port)))
	//
	//	}
	//}
	gin.SetMode(gin.ReleaseMode)
	gin.DisableConsoleColor()

	// TODO: graceful exit
	//server := &http.Server{
	//	Addr:           ":8080",
	//	Handler:        defineRoutes(),
	//	ReadTimeout:    10 * time.Second,
	//	WriteTimeout:   10 * time.Second,
	//	MaxHeaderBytes: 1 << 20,
	//}
	//go func() {
	//	if err := server.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {
	//		log.Fatalf("listen: %s\n", err)
	//	}
	//}()
	//
	//// 等待中断信号以关闭服务器（设置 5 秒的超时时间）
	//quit := make(chan os.Signal, 1)
	//signal.Notify(quit, os.Interrupt)
	//<-quit
	//log.Println("Shutdown Server ...")
	//
	//ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	//defer cancel()
	//if err := server.Shutdown(ctx); err != nil {
	//	log.Fatal("Server Shutdown:", err)
	//}
	//log.Println("Server exiting")
	err := defineRoutes().Run("0.0.0.0:12345")
	if err != nil {
		return
	}
}
