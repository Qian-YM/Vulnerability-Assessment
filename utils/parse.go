package utils

import (
	"errors"
	"gopkg.in/yaml.v3"
)

type ExecPOC struct {
	POC
	Name string
	data []byte
}

type RequestPOC struct {
	POC
	Name string
	data []byte
}

type ExecRule struct {
	Expression string `yaml:"expression"`
}

type RequestRule struct {
	Request struct {
		Cache  bool   `yaml:"cache"`
		Method string `yaml:"method"`
		Path   string `yaml:"path"`
	}
	Expression string `yaml:"expression"`
}

type POC interface {
	//GetPoc() (map[string]ExecPOC, error)
	GetPoc() (interface{}, error)
	GetRule() (string, error)
	GetDetail() (string, error)
}

func (poc RequestPOC) GetPoc() (interface{}, error) {
	var content struct {
		Rules map[string]RequestRule `yaml:"rules"`
	}
	err := yaml.Unmarshal(poc.data, &content)
	if err != nil {
		return nil, err
	}
	return content.Rules, nil
}

func (poc RequestPOC) GetRule() (string, error) {
	var content struct {
		Expression string `yaml:"expression"`
	}
	err := yaml.Unmarshal(poc.data, &content)
	if err != nil {
		return "", err
	}
	return content.Expression, nil
}

func GetPoc(data []byte) (POC, error) {
	var content struct {
		Name      string `yaml:"name"`
		Transport string `yaml:"transport"`
	}
	err := yaml.Unmarshal(data, &content)
	if err != nil {
		return nil, err
	}
	switch content.Transport {
	case "http", "tcp", "udp":
		return RequestPOC{
			Name: content.Name,
			data: data,
		}, nil
	case "exec":
		return ExecPOC{
			Name: content.Name,
			data: data,
		}, nil
	default:
		return nil, errors.New("unsupported transport type")
	}
}

func PhraseXML() {

}
