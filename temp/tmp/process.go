package tmp

import (
	"os/exec"
	"strings"
)

func processCheck() {
	printMsg("## 进程信息检查")

	// CPU占用TOP 15
	cpu := getCommandOutput("ps", "aux")
	cpuLines := strings.Split(cpu, "\n")
	cpuTop15 := make([]string, 0, 15)
	for i, line := range cpuLines {
		if i == 0 || strings.HasPrefix(line, "USER") {
			continue
		}
		cpuTop15 = append(cpuTop15, line)
		if len(cpuTop15) >= 15 {
			break
		}
	}
	printMsg("### CPU占用TOP 15")
	printCode(strings.Join(cpuTop15, "\n"))

	// 内存占用TOP 15
	mem := getCommandOutput("ps", "aux")
	memLines := strings.Split(mem, "\n")
	memTop15 := make([]string, 0, 15)
	for i, line := range memLines {
		if i == 0 || strings.HasPrefix(line, "USER") {
			continue
		}
		memTop15 = append(memTop15, line)
		if len(memTop15) >= 15 {
			break
		}
	}
	printMsg("### 内存占用TOP 15")
	printCode(strings.Join(memTop15, "\n"))

	// 父进程为1的进程信息
	parentProcesses := getCommandOutput("ps", "-e", "-o", "user,pid,ppid,cmd")
	parentProcessesFiltered := filterParentProcesses(parentProcesses)
	printMsg("### 父进程为1的进程信息")
	printCode(parentProcessesFiltered)

	// bash反弹shell进程
	tcpReverse := getCommandOutput("ps", "-ef")
	tcpReverseFiltered := filterTCPReverse(tcpReverse)
	printMsg("### bash反弹shell进程")
	if tcpReverseFiltered != "" {
		printCode(tcpReverseFiltered)
	} else {
		printCode("未发现 bash -i 反弹shell！")
	}

	// SSH 软连接后门进程
	sshBackdoor := getCommandOutput("ps", "-ef")
	sshBackdoorFiltered := filterSSHBackdoor(sshBackdoor)
	printMsg("### SSH 软连接后门进程")
	if sshBackdoorFiltered != "" {
		printMsg(sshBackdoorFiltered)
	} else {
		printMsg("未检测到 SSH 软连接后门")
	}
}

func filterParentProcesses(input string) string {
	lines := strings.Split(input, "\n")
	var filteredLines []string
	for _, line := range lines {
		if !strings.Contains(line, "containerd-shim") &&
			!strings.Contains(line, "/lib/systemd/systemd") &&
			!strings.Contains(line, "/usr/sbin/cron") &&
			!strings.Contains(line, "dbus") &&
			!strings.Contains(line, "rsyslogd") &&
			!strings.Contains(line, "containerd") &&
			!strings.Contains(line, "/usr/sbin/sshd") &&
			!strings.Contains(line, "/usr/bin/dockerd") &&
			!strings.Contains(line, "/usr/sbin/arpd") &&
			!strings.Contains(line, "/bin/login") &&
			!strings.Contains(line, "/usr/sbin/vnstatd") {
			filteredLines = append(filteredLines, line)
		}
	}
	return strings.Join(filteredLines, "\n")
}

func filterTCPReverse(input string) string {
	lines := strings.Split(input, "\n")
	var filteredLines []string
	for _, line := range lines {
		if strings.Contains(line, "sh -i") {
			fields := strings.Fields(line)
			pid := fields[1]
			lsofCmd := exec.Command("lsof", "-p", pid)
			lsofOutput, err := lsofCmd.Output()
			if err == nil && strings.Contains(string(lsofOutput), "ESTAB") {
				filteredLines = append(filteredLines, string(lsofOutput))
			}
		}
	}
	return strings.Join(filteredLines, "\n")
}

func filterSSHBackdoor(input string) string {
	lines := strings.Split(input, "\n")
	var filteredLines []string
	for _, line := range lines {
		if strings.Contains(line, "-oport=") {
			filteredLines = append(filteredLines, line)
		}
	}
	return strings.Join(filteredLines, "\n")
}
