package tmp

import (
	"os"
)

func envCheck() {
	printMsg("## 环境变量检查")

	// env
	printMsg("### env")
	printCode(getCommandOutput("env"))

	// PATH
	printMsg("### PATH")
	printCode(os.Getenv("PATH"))

	printMsg("### Linux 动态链接库变量")

	// LD_PRELOAD
	ldPreload := os.Getenv("LD_PRELOAD")
	if ldPreload != "" {
		printMsg("**LD_PRELOAD**")
		printCode(ldPreload)
	}

	// LD_ELF_PRELOAD
	ldElfPreload := os.Getenv("LD_ELF_PRELOAD")
	if ldElfPreload != "" {
		printMsg("**LD_ELF_PRELOAD**")
		printCode(ldElfPreload)
	}

	// LD_AOUT_PRELOAD
	ldAoutPreload := os.Getenv("LD_AOUT_PRELOAD")
	if ldAoutPreload != "" {
		printMsg("**LD_AOUT_PRELOAD**")
		printCode(ldAoutPreload)
	}

	// PROMPT_COMMAND
	promptCommand := os.Getenv("PROMPT_COMMAND")
	if promptCommand != "" {
		printMsg("**PROMPT_COMMAND**")
		printCode(promptCommand)
	}

	// LD_LIBRARY_PATH
	ldLibraryPath := os.Getenv("LD_LIBRARY_PATH")
	if ldLibraryPath != "" {
		printMsg("**LD_LIBRARY_PATH**")
		printCode(ldLibraryPath)
	}

	// ld.so.preload
	preload := "/etc/ld.so.preload"
	if _, err := os.Stat(preload); err == nil {
		printMsg("**ld.so.preload**")
		printCode(getCommandOutput("cat", preload))
	}

	// 正在运行的环境变量
	printMsg("### 正在运行的进程环境变量问题")
	printCode(getCommandOutput("bash", "-c", "grep -P 'LD_PRELOAD|LD_ELF_PRELOAD|LD_AOUT_PRELOAD|PROMPT_COMMAND|LD_LIBRARY_PATH' /proc/*/environ"))
}
