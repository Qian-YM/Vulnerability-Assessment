package main

import (
	"context"
	"fmt"
	"log"
	"os/exec"
	"strings"
	"time"
)

/*
root@zzzp-virtual-machine:/home/zzzp/LinuxCheck_re# sudo nmap -p- 127.0.0.1
Starting Nmap 7.80 ( https://nmap.org ) at 2024-07-09 22:24 CST
Nmap scan report for localhost (127.0.0.1)
Host is up (0.0000020s latency).
Not shown: 65527 closed ports
PORT      STATE SERVICE
22/tcp    open  ssh
80/tcp    open  http
631/tcp   open  ipp
3306/tcp  open  mysql
8888/tcp  open  sun-answerbook
9999/tcp  open  abyss
33060/tcp open  mysqlx
36145/tcp open  unknown

root@zzzp-virtual-machine:/home/zzzp/LinuxCheck_re# sudo netstat -tulnp | grep -E '(:8888|:9999)'
tcp        0      0 0.0.0.0:9999            0.0.0.0:*               LISTEN      8518/socat
tcp        0      0 0.0.0.0:8888            0.0.0.0:*               LISTEN      9217/socat

root@zzzp-virtual-machine:/home/zzzp/LinuxCheck_re# ps -p 8518 -o command
COMMAND
socat TCP-LISTEN:9999,fork EXEC:/home/zzzp/LinuxCheck_re/pwn
*/
func filterNmapOutput(output string, filter []string) string {
	lines := strings.Split(output, "\n")
	var filteredLines []string

	for _, line := range lines {
		includeLine := true
		for _, service := range filter {
			if strings.Contains(line, service) {
				includeLine = false
				break
			}
		}
		if includeLine {
			filteredLines = append(filteredLines, line)
		}
	}
	return strings.Join(filteredLines, "\n")
}

func find_service(ip_addr string) string {
	// 创建exec.Command来执行shell命令
	output, err := runCommand("sh", "-c", "sudo nmap -p- "+ip_addr)
	if err != nil {
		printCode("Error running hostnamectl: " + err.Error())
	} else {
		printCode(output)
	}
	filter := []string{"ssh", "http", "ipp", "mysql", "mysqlx", "unknown"}
	filteredOutput := filterNmapOutput(output, filter)
	// 打印过滤后的输出
	fmt.Println("--------------------------")
	fmt.Println(filteredOutput)
	return filteredOutput
}

func parsePorts(input string) []string {
	var ports []string

	lines := strings.Split(input, "\n")
	startParsing := false

	for _, line := range lines {
		if startParsing && strings.Contains(line, "/tcp") {
			parts := strings.Fields(line)
			if len(parts) >= 2 {
				port := strings.Split(parts[0], "/")[0]
				ports = append(ports, port)
			}
		} else if strings.HasPrefix(line, "PORT") {
			startParsing = true
		}
	}
	// fmt.Printf("---------------------------------")
	// fmt.Printf("%s",ports)
	return ports
}

func getPath(port string) string {
	command := fmt.Sprintf("sudo netstat -tulnp | grep -E '(:%s)'", port)
	output, err := runCommand("sh", "-c", command)
	if err != nil {
		fmt.Printf("Error running command for port %s: %v\n", port, err)
		return output
	}
	output = strings.Split(output, "LISTEN")[1]
	output = strings.TrimSpace(output)
	output = strings.Split(output, "/")[0]

	command = fmt.Sprintf("ps -p %s -o command", output)
	output, err = runCommand("sh", "-c", command)
	if err != nil {
		fmt.Printf("Error running command for port %s: %v\n", port, err)
		return output
	}
	// fmt.Println("********************************")
	// fmt.Println("%s",output)
	realpath := strings.Split(output, "EXEC:")[1]
	return realpath
}

func prepare_seed() {
	// 准备初始种子，使用LLM进行辅助
}

func Fuzz(file_path string, timeout time.Duration) error {
	ctx, cancel := context.WithTimeout(context.Background(), timeout)
	defer cancel()
	cmd := exec.CommandContext(ctx, "./fuzz-afl/afl-fuzz", "-i", "./fuzz-afl/input/", "-o", "./fuzz-afl/output/", "-Q", file_path)

	fmt.Printf("Starting afl-fuzz for %s\n", file_path)
	out, err := cmd.CombinedOutput()
	//	cmd.Run()
	if err != nil {
		fmt.Printf("Error running fuzz\n")
		log.Fatal(err)
	}

	fmt.Printf("Output: %s\n", out)
	return nil
}

/*
* echo core > /proc/sys/kernel/core_pattern
* cd fuzz-afl
* ./afl-fuzz -i  input/ -o output/ -Q $1 -V 1
 */
// func runAflFuzz(file_path string, timeout time.Duration) error {
//     ctx, cancel := context.WithTimeout(context.Background(), timeout)
//     defer cancel()

//     cmd := exec.CommandContext(ctx, "./afl-fuzz", "-i", "input/", "-o", "output/", "-Q", file_path)
//     cmd.Dir = "fuzz-afl"

//     fmt.Printf("Starting afl-fuzz for %s\n", file_path)
//     if err := cmd.Run(); err != nil {
//         return fmt.Errorf("afl-fuzz failed: %v", err)
//     }

//     return nil
// }
