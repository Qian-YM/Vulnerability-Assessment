package main

import (
	"bytes"
	"fmt"
	"os/exec"
	"strings"
)


func printMsg(msg string) {
	fmt.Println(msg)
}

func printCode(code string) {
	fmt.Println(code)
}

func runCommand(cmd string, args ...string) (string, error) {
	var out bytes.Buffer
	command := exec.Command(cmd, args...)
	command.Stdout = &out
	err := command.Run()
	return out.String(), err
}

func dockerCheck() {
	printMsg("## Docker信息检测")

	printMsg("### Docker运行的镜像")
	dockerPs, err := runCommand("docker", "ps")
	if err != nil {
		printCode("Error running docker ps: " + err.Error())
	} else {
		printCode(dockerPs)
	}

	printMsg("### 检测CAP_SYS_ADMIN权限")
	capshPath, err := exec.LookPath("capsh")
	if err != nil {
		printCode("未发现capsh命令！")
	} else {
		capSysAdmin, err := runCommand(capshPath, "--print")
		if err != nil {
			printCode("Error running capsh --print: " + err.Error())
		} else {
			if strings.Contains(capSysAdmin, "cap_sys_admin") {
				printCode("存在CAP_SYS_ADMIN权限！")
			}
		}
	}

	printMsg("### 检测CAP_DAC_READ_SEARCH权限")
	if capshPath, err := exec.LookPath("capsh"); err != nil {
		printCode("未发现capsh命令！")
	} else {
		capDacReadSearch, err := runCommand(capshPath, "--print")
		if err != nil {
			printCode("Error running capsh --print: " + err.Error())
		} else {
			if strings.Contains(capDacReadSearch, "cap_dac_read_search") {
				printCode("存在CAP_DAC_READ_SEARCH！")
			}
		}
	}
}
