package main

import (
	"bytes"
	"fmt"
	"os/exec"
	"strings"
)



func printMsg(msg string) {
	fmt.Println(msg)
}

func printCode(code string) {
	fmt.Println(code)
}

func runCommand(cmd string, args ...string) (string, error) {
	var out bytes.Buffer
	command := exec.Command(cmd, args...)
	command.Stdout = &out
	command.Stderr = &out
	err := command.Run()
	return out.String(), err
}

func dockerCheck() {
	printMsg("## Docker 安全性检查")

	// 检查 Docker 是否安装
	printMsg("### 检查 Docker 安装状态")
	if _, err := exec.LookPath("docker"); err != nil {
		printCode("Docker 未安装或未在 PATH 中找到")
		return
	} else {
		printCode("Docker 已安装")
	}

	// 检查 Docker 运行的容器
	printMsg("### Docker 运行的容器")
	dockerPs, err := runCommand("docker", "ps")
	if err != nil {
		printCode("Error running docker ps: " + err.Error())
	} else {
		printCode(dockerPs)
	}

	// 检查特权容器
	printMsg("### 检查特权容器")
	privilegedContainers, err := runCommand("docker", "ps", "--filter", "privileged=true", "--format", "{{.ID}}: {{.Image}}")
	if err != nil {
		printCode("Error running docker ps with filter: " + err.Error())
	} else if strings.TrimSpace(privilegedContainers) == "" {
		printCode("无特权容器运行")
	} else {
		printCode("特权容器运行中:\n" + privilegedContainers)
	}

	// 检查资源限制
	printMsg("### 检查资源限制")
	dockerInspect, err := runCommand("docker", "ps", "-q")
	if err != nil {
		printCode("Error running docker ps -q: " + err.Error())
	} else {
		containers := strings.Split(strings.TrimSpace(dockerInspect), "\n")
		for _, container := range containers {
			inspect, err := runCommand("docker", "inspect", "--format",
				"'{{.Id}}: CPU={{.HostConfig.NanoCpus}}, Memory={{.HostConfig.Memory}}'", container)
			if err != nil {
				printCode("Error inspecting container " + container + ": " + err.Error())
			} else {
				printCode(inspect)
			}
		}
	}

	// 检查 CAP_SYS_ADMIN 和 CAP_DAC_READ_SEARCH 权限
	checkCapabilities("CAP_SYS_ADMIN")
	checkCapabilities("CAP_DAC_READ_SEARCH")
}

func checkCapabilities(capability string) {
	printMsg("### 检查 " + capability + " 权限")
	if _, err := exec.LookPath("capsh"); err != nil {
		printCode("未发现 capsh 命令")
	} else {
		capabilities, err := runCommand("capsh", "--print")
		if err != nil {
			printCode("Error running capsh --print: " + err.Error())
		} else if strings.Contains(capabilities, strings.ToLower(capability)) {
			printCode("存在 " + capability + " 权限")
		} else {
			printCode("不存在 " + capability + " 权限")
		}
	}
}
