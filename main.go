package main

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
    "sync"
)

func banner() {
	fmt.Println()
	cmd := exec.Command("cat", "./banner")

	// 获取命令输出
	output, err := cmd.Output()
	if err != nil {
		fmt.Println("Error:", err)
		return
	}

	// 打印命令输出
	fmt.Println(string(output))
	fmt.Println()
}

func getCommandOutput(command string, args ...string) string {
	cmd := exec.Command(command, args...)
	var out bytes.Buffer
	cmd.Stdout = &out
	err := cmd.Run()
	if err != nil {
		return fmt.Sprintf("Error running %s %s: %s", command, args, err)
	}
	return out.String()
}

func runCommand(cmd string, args ...string) (string, error) {
	var out bytes.Buffer
	command := exec.Command(cmd, args...)
	command.Stdout = &out
	err := command.Run()
	return out.String(), err
}

func help() {
	fmt.Println("-h help")
	fmt.Println("-a all")
}

func test1() {
    Fuzz("./fuzz-afl/test", 10*1e9)
}
func main() {
	// os.Args[0] 是程序的名称
	// os.Args[1:] 是传递给程序的参数
	args := os.Args
	banner()
    var wg sync.WaitGroup
    
    //wg.Add(1)
	//go Fuzz("./fuzz-afl/test", 10*1e9)
    //fmt.Println("done")
    //wg.Add(1)
    //go Fuzz("./fuzz-afl/test", 10*1e9)
    dockerCheck()
    
	if len(args) > 1 {
		choice := args[1]
		if choice == "-k" {
			kernel_version()
			rootkitCheck()
		}
		if choice == "-h" {
			help()
		}
	}
    wg.Wait()
}
