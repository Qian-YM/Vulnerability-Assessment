package main

import (
	"errors"
	"log"
	"sync"
	"vulAssess/target"
)

type execRes struct {
	t        *target.SSHTarget
	category string
	res      string
}

// TODO: 每个靶机单独处理错误，而不是收到错误直接结束
func run(t target.SSHTarget, errChan chan error, resChan chan execRes) {
	err := target.GetArch(t)
	if err != nil {
		errChan <- err
		return
	}
	err = t.UploadClient()
	if err != nil {
		errChan <- err
		return
	}
	err = t.ActiveClient()
	if err != nil {
		errChan <- err
		return
	}
	err = t.TestClient()
	if err != nil {
		errChan <- err
		return
	}
	resChan <- execRes{
		t:        &t,
		category: "active",
		res:      "",
	}
}

func topoNet(t target.SSHTarget, ipList []string, errChan chan error, resChan chan execRes) {
	var ip struct {
		Ip []string `json:"ip"`
	}
	ip.Ip = ipList
	res, err := t.ApiRunCommand("ping_host", ip)
	if err != nil {
		errChan <- err
	}
	resChan <- execRes{
		t:        &t,
		category: "topo",
		res:      res,
	}
}

// TODO: 整理代码，统一错误处理
// TODO: 将配置写入config文件
func main() {
	// TODO: ssh弱口令检查
	errRes := make(chan error)
	resChan := make(chan execRes)
	done := make(chan struct{})

	var wg sync.WaitGroup
	wg.Add(len(targets))

	var unReachable []string

	for _, t := range targets {
		err := target.DiscoveryHost(t.GetClientTarget())
		if err == nil {
			go run(t, errRes, resChan)
		} else {
			log.Println(err)
			unReachable = append(unReachable, t.Addr.String())
			wg.Done()
		}
	}

	// 等待关闭信号
	go func() {
		wg.Wait()
		done <- struct{}{}
	}()

	// 循环等待
	for {
		select {
		case err := <-errRes:
			if err != nil {
				panic(err)
			}
		case res := <-resChan:
			switch res.category {
			case "active":
				go topoNet(*res.t, unReachable, errRes, resChan)
			case "topo":
				// TODO: 接收可ping通的ip,加入拓扑树中
				// 使用树记录网络拓扑，根节点为自身，儿子为可以ping通的ip
				// end
				go func() {
					defer wg.Done()
					log.Println(res.res)
				}()
			default:
				panic(errors.New(res.category))
			}
		case <-done:
			goto End
		}
	}
End:
	//go collect.GetServer(target.ClientTarget{
	//	Addr:      "http://125.220.147.45:12345",
	//	ProxyAddr: "http://127.0.0.1:8888",
	//})
	//// TODO: 使用yml记录poc
}
