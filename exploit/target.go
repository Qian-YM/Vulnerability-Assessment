package exploit

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/jedib0t/go-pretty/v6/table"
	"gopkg.in/yaml.v3"
	"io"
	"net/http"
	"os"
)

// Service 服务信息
type Service struct {
	Version string `yaml:"version"`
	Port    string `yaml:"port"`
}

// Uname 系统信息
type Uname struct {
	Version string
}

// Client 靶机客户端信息
type Client struct {
	Name     string
	Host     string
	Port     string
	Services map[string]Service
	Uname    Uname
	Res      *[]table.Row
}

const (
	resTrue  = "\u001B[1;32mTrue\u001B[0m"
	resFalse = "\u001B[1;31mFalse\u001B[0m"
)

var (
	Clients []Client
)

func (c *Client) ClientApiReq(api string, data interface{}) (string, error) {
	host := fmt.Sprintf("http://%s:%s/%s", c.Host, c.Port, api)
	jsonData, err := json.Marshal(data)
	if err != nil {
		return "", err
	}
	req, err := http.NewRequest("POST", host, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", err
	}
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{}
	res, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer res.Body.Close()
	body, err := io.ReadAll(res.Body)
	if err != nil {
		return "", err
	}

	return string(body), nil
}

func (c *Client) ClientExec(cmd []string) (string, error) {
	data := struct {
		Args []string `json:"args"`
	}{
		Args: cmd,
	}
	return c.ClientApiReq("api/exec", &data)
}

// GetTargets 读取靶机的同时初始化靶机列表
func GetTargets(fileName string) error {
	yamlFile, err := os.Open(fileName)
	if err != nil {
		return err
	}
	defer yamlFile.Close()

	byteValue, err := io.ReadAll(yamlFile)
	if err != nil {
		return err
	}

	var targets map[string]struct {
		Host     string             `yaml:"host"`
		Port     string             `yaml:"port"`
		Uname    Uname              `yaml:"uname"`
		Services map[string]Service `yaml:"services"`
	}
	err = yaml.Unmarshal(byteValue, &targets)
	if err != nil {
		return err
	}

	for k, v := range targets {
		Clients = append(Clients, Client{
			Name:     k,
			Host:     v.Host,
			Port:     v.Port,
			Services: v.Services,
			Uname:    v.Uname,
			Res:      &[]table.Row{},
		})
	}
	//fmt.Println(Clients)
	return nil
}

// PrintRes 输出client自身结果
func (c *Client) PrintRes() {

	fmt.Printf("Target: %s(%s)\n", c.Name, c.Host)

	t := table.NewWriter()
	t.SetOutputMirror(os.Stdout)
	t.AppendHeader(table.Row{"Service", "Port", "Version", "available poc", "is success"})
	t.AppendRows(*c.Res)
	t.SortBy([]table.SortBy{
		{Name: "SERVICE", Mode: table.Asc},
		{Name: "VERSION", Mode: table.Asc},
	})
	t.Render()

	fmt.Printf("\n")
}
